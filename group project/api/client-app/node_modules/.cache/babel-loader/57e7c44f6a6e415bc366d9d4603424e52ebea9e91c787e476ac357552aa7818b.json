{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TimeSlotSettings=_ref=>{let{timeSlots,setTimeSlots}=_ref;const[startTime,setStartTime]=useState(\"\");const[endTime,setEndTime]=useState(\"\");const[error,setError]=useState(null);// Helper function to check if time slots overlap\nconst checkOverlap=(newStart,newEnd)=>{return timeSlots.some(slot=>newStart>=new Date(`1970-01-01T${slot.startTime}`)&&newStart<new Date(`1970-01-01T${slot.endTime}`)||newEnd>new Date(`1970-01-01T${slot.startTime}`)&&newEnd<=new Date(`1970-01-01T${slot.endTime}`));};// Add time slot\nconst addTimeSlot=()=>{if(!startTime||!endTime){setError(\"Både start- og sluttid er påkrævet.\");// Translated: Both start and end time are required.\nreturn;}const newStartTime=new Date(`1970-01-01T${startTime}:00`);const newEndTime=new Date(`1970-01-01T${endTime}:00`);if(newEndTime<=newStartTime){setError(\"Sluttid skal være efter starttid.\");// Translated: End time must be after start time.\nreturn;}if(checkOverlap(newStartTime,newEndTime)){setError(\"Tidsinterval overlapper med et eksisterende interval.\");// Translated: Time slot overlaps with an existing slot.\nreturn;}setTimeSlots([...timeSlots,{startTime:startTime,endTime:endTime}]);setStartTime(\"\");setEndTime(\"\");setError(null);};return/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8 border-t-2 border-black-900\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"font-bold font-xl\",children:\"Tids Indstillinger\"}),\" \",/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:startTime,onChange:e=>setStartTime(e.target.value),className:\"m-2 p-2 border rounded\"}),/*#__PURE__*/_jsx(\"input\",{type:\"time\",value:endTime,onChange:e=>setEndTime(e.target.value),className:\"m-2 p-2 border rounded\"}),/*#__PURE__*/_jsx(\"button\",{onClick:addTimeSlot,className:\"m-4 px-5 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-600 rounded-lg hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80\",children:\"Tilf\\xF8j \"}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"text-red-500\",children:error}),/*#__PURE__*/_jsx(\"ul\",{children:timeSlots.map((slot,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[slot.startTime,\" - \",slot.endTime]},index))})]});};export default TimeSlotSettings;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","TimeSlotSettings","_ref","timeSlots","setTimeSlots","startTime","setStartTime","endTime","setEndTime","error","setError","checkOverlap","newStart","newEnd","some","slot","Date","addTimeSlot","newStartTime","newEndTime","className","children","type","value","onChange","e","target","onClick","map","index"],"sources":["C:/Users/sigur/OneDrive/Dokumenter/GitHub/DND-semester-Project/group project/api/client-app/src/Components/admConfig/TimeSlotSettings.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst TimeSlotSettings = ({ timeSlots, setTimeSlots }) => {\r\n  const [startTime, setStartTime] = useState(\"\");\r\n  const [endTime, setEndTime] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n\r\n  // Helper function to check if time slots overlap\r\n  const checkOverlap = (newStart, newEnd) => {\r\n    return timeSlots.some(\r\n      (slot) =>\r\n        (newStart >= new Date(`1970-01-01T${slot.startTime}`) && newStart < new Date(`1970-01-01T${slot.endTime}`)) ||\r\n        (newEnd > new Date(`1970-01-01T${slot.startTime}`) && newEnd <= new Date(`1970-01-01T${slot.endTime}`))\r\n    );\r\n  };\r\n\r\n  // Add time slot\r\n  const addTimeSlot = () => {\r\n    if (!startTime || !endTime) {\r\n      setError(\"Både start- og sluttid er påkrævet.\"); // Translated: Both start and end time are required.\r\n      return;\r\n    }\r\n\r\n    const newStartTime = new Date(`1970-01-01T${startTime}:00`);\r\n    const newEndTime = new Date(`1970-01-01T${endTime}:00`);\r\n\r\n    if (newEndTime <= newStartTime) {\r\n      setError(\"Sluttid skal være efter starttid.\"); // Translated: End time must be after start time.\r\n      return;\r\n    }\r\n\r\n    if (checkOverlap(newStartTime, newEndTime)) {\r\n      setError(\"Tidsinterval overlapper med et eksisterende interval.\"); // Translated: Time slot overlaps with an existing slot.\r\n      return;\r\n    }\r\n\r\n    setTimeSlots([...timeSlots, { startTime: startTime, endTime: endTime }]);\r\n    setStartTime(\"\");\r\n    setEndTime(\"\");\r\n    setError(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mt-8 border-t-2 border-black-900\">\r\n      <h2 className=\"font-bold font-xl\">Tids Indstillinger</h2> {/* Translated: Time Slot Settings */}\r\n      <input\r\n        type=\"time\"\r\n        value={startTime}\r\n        onChange={(e) => setStartTime(e.target.value)}\r\n        className=\"m-2 p-2 border rounded\"\r\n      />\r\n      <input\r\n        type=\"time\"\r\n        value={endTime}\r\n        onChange={(e) => setEndTime(e.target.value)}\r\n        className=\"m-2 p-2 border rounded\"\r\n      />\r\n      <button\r\n        onClick={addTimeSlot}\r\n        className=\"m-4 px-5 py-2 font-medium tracking-wide text-white capitalize transition-colors duration-300 transform bg-blue-600 rounded-lg hover:bg-blue-500 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-80\"\r\n      >\r\n        Tilføj {/* Translated: Add */}\r\n      </button>\r\n      {error && <p className=\"text-red-500\">{error}</p>}\r\n      <ul>\r\n        {timeSlots.map((slot, index) => (\r\n          <li key={index}>\r\n            {slot.startTime} - {slot.endTime}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeSlotSettings;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,KAAM,CAAAC,gBAAgB,CAAGC,IAAA,EAAiC,IAAhC,CAAEC,SAAS,CAAEC,YAAa,CAAC,CAAAF,IAAA,CACnD,KAAM,CAACG,SAAS,CAAEC,YAAY,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACc,KAAK,CAAEC,QAAQ,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAExC;AACA,KAAM,CAAAgB,YAAY,CAAGA,CAACC,QAAQ,CAAEC,MAAM,GAAK,CACzC,MAAO,CAAAV,SAAS,CAACW,IAAI,CAClBC,IAAI,EACFH,QAAQ,EAAI,GAAI,CAAAI,IAAI,CAAC,cAAcD,IAAI,CAACV,SAAS,EAAE,CAAC,EAAIO,QAAQ,CAAG,GAAI,CAAAI,IAAI,CAAC,cAAcD,IAAI,CAACR,OAAO,EAAE,CAAC,EACzGM,MAAM,CAAG,GAAI,CAAAG,IAAI,CAAC,cAAcD,IAAI,CAACV,SAAS,EAAE,CAAC,EAAIQ,MAAM,EAAI,GAAI,CAAAG,IAAI,CAAC,cAAcD,IAAI,CAACR,OAAO,EAAE,CACzG,CAAC,CACH,CAAC,CAED;AACA,KAAM,CAAAU,WAAW,CAAGA,CAAA,GAAM,CACxB,GAAI,CAACZ,SAAS,EAAI,CAACE,OAAO,CAAE,CAC1BG,QAAQ,CAAC,qCAAqC,CAAC,CAAE;AACjD,OACF,CAEA,KAAM,CAAAQ,YAAY,CAAG,GAAI,CAAAF,IAAI,CAAC,cAAcX,SAAS,KAAK,CAAC,CAC3D,KAAM,CAAAc,UAAU,CAAG,GAAI,CAAAH,IAAI,CAAC,cAAcT,OAAO,KAAK,CAAC,CAEvD,GAAIY,UAAU,EAAID,YAAY,CAAE,CAC9BR,QAAQ,CAAC,mCAAmC,CAAC,CAAE;AAC/C,OACF,CAEA,GAAIC,YAAY,CAACO,YAAY,CAAEC,UAAU,CAAC,CAAE,CAC1CT,QAAQ,CAAC,uDAAuD,CAAC,CAAE;AACnE,OACF,CAEAN,YAAY,CAAC,CAAC,GAAGD,SAAS,CAAE,CAAEE,SAAS,CAAEA,SAAS,CAAEE,OAAO,CAAEA,OAAQ,CAAC,CAAC,CAAC,CACxED,YAAY,CAAC,EAAE,CAAC,CAChBE,UAAU,CAAC,EAAE,CAAC,CACdE,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAED,mBACEV,KAAA,QAAKoB,SAAS,CAAC,kCAAkC,CAAAC,QAAA,eAC/CvB,IAAA,OAAIsB,SAAS,CAAC,mBAAmB,CAAAC,QAAA,CAAC,oBAAkB,CAAI,CAAC,IAAC,cAC1DvB,IAAA,UACEwB,IAAI,CAAC,MAAM,CACXC,KAAK,CAAElB,SAAU,CACjBmB,QAAQ,CAAGC,CAAC,EAAKnB,YAAY,CAACmB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC9CH,SAAS,CAAC,wBAAwB,CACnC,CAAC,cACFtB,IAAA,UACEwB,IAAI,CAAC,MAAM,CACXC,KAAK,CAAEhB,OAAQ,CACfiB,QAAQ,CAAGC,CAAC,EAAKjB,UAAU,CAACiB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC5CH,SAAS,CAAC,wBAAwB,CACnC,CAAC,cACFtB,IAAA,WACE6B,OAAO,CAAEV,WAAY,CACrBG,SAAS,CAAC,yNAAyN,CAAAC,QAAA,CACpO,YACQ,CACD,CAAC,CACRZ,KAAK,eAAIX,IAAA,MAAGsB,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAEZ,KAAK,CAAI,CAAC,cACjDX,IAAA,OAAAuB,QAAA,CACGlB,SAAS,CAACyB,GAAG,CAAC,CAACb,IAAI,CAAEc,KAAK,gBACzB7B,KAAA,OAAAqB,QAAA,EACGN,IAAI,CAACV,SAAS,CAAC,KAAG,CAACU,IAAI,CAACR,OAAO,GADzBsB,KAEL,CACL,CAAC,CACA,CAAC,EACF,CAAC,CAEV,CAAC,CAED,cAAe,CAAA5B,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}